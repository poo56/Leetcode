class Node:
    def __init__(self, data):
        self.data = data
        self.next = None


class Queue:
    def __init__(self):
        self.front = None
        self.rear = None
        self.size = 0

    def is_empty(self):
        return self.size == 0

    def enqueue(self, data):
        new_node = Node(data)
        if self.rear is None:
            self.front = self.rear = new_node

        else:
            #Add a new node at the rear and move the rear pointer
            self.rear.next = new_node
            self.rear = new_node
        self.size +=1


    def deQueue(self):

        if self.is_empty():
            return "Queue is empty"

        queued_data = self.front.data
        self.front = self.front.next

        if self.front is None:
            self.rear = None

        self.size -=1
        return queued_data

    def display(self):
        elements = []
        current = self.front
        while current:
            elements.append(current.data)
            current = current.next
        return elements

    def peek(self):
        if self.is_empty():
            return "Queue is empty"
        return self.front.data

queue = Queue()
queue.enqueue(10)
queue.enqueue(20)
queue.enqueue(30)
print(queue.display())
print(queue.deQueue())
print(queue.peek())
print(queue.display())

