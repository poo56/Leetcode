class ListNode:
    def __init__(self, value):
        self.val = value
        self.next = None

def cycleDetection(head):

    tort = head
    heir = head

    while heir and heir.next is not None:

        tort = tort.next #Movimg just one pointer
        heir = heir.next.next #Moving 2 pointers

        if tort == heir:  #When tortoise and heir meets fetching their pointers
            break

    else:
        #No Cycle
        #While condition does not meet
        return None

    tort = head
    
    while tort != heir:
        tort = tort.next
        heir = heir.next

    return tort

    # Example usage:
    # Create a linked list with a cycle
head = ListNode(3)
node1 = ListNode(2)
node2 = ListNode(0)
node3 = ListNode(-4)

head.next = node1
node1.next = node2
node2.next = node3
node3.next = node1  # creating a cycle

result = cycleDetection(head)

if result:
    print("Cycle detected. Starting node of the cycle is at value:", result.val)
else:
    print("No cycle detected.")
