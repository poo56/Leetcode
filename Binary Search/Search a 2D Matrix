#Approach 1: Brute Force

def searchMatric():
    for r in range(len(matrix)):
        for c in range(len(matrix[0])):
            if matrix[r][c] == target:
                return True
    return False

#Approach 2: Staircase Search
def searchMatrix():
    matrix = [[1, 2, 4, 8], [10, 11, 12, 13], [14, 20, 30, 40]]
    n = len(matrix[0])
    m = len(matrix)

    r = 0
    c = n - 1

    while r < m and c >= 0:
        if target > matrix[r][c]:
            r += 1
        elif target < matrix[r][c]:
            c -=1
        else:
            return True
    return False

#Approach 3: Binary Search 

def matrx_search():

    matrix = [[1,2,4,8],[10,11,12,13],[14,20,30,40]]
    target = 10

    COLM = len(matrix[0])
    ROWS = len(matrix)

    top = 0
    bottom = ROWS - 1

    while top <= bottom:
        row_count = (top + bottom) // 2
        if target > matrix[row_count][-1]:
            top = row_count + 1
        elif target < matrix[row_count][0]:
            bottom = row_count - 1
        else:
            break

    if not (top <= bottom):
        return False

    row_count = (top + bottom) // 2
    l = 0
    r = COLM - 1
    while l <= r:
        mid = (l + r) // 2
        if target > matrix[row_count][mid]:
            l = mid + 1
        elif target < matrix[row_count][mid]:
            r = mid - 1
        else:
            return True
    return False





